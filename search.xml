<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Centos7使用Docker快速搭建深度学习环境]]></title>
    <url>%2F2018%2F12%2F04%2Fdocker-env%2F</url>
    <content type="text"><![CDATA[1. 什么是 Docker 解决 “在我的机器上可以正常工作，为什么在你的机器上不能工作” 的问题。 随着深度学习技术的飞速发展，各种深度学习框架都有大量的粉丝。如何在一台电脑上安装多个深度学习框架？同一深度学习框架的不同版本依赖于不同的GPU版本，但是一台服务器只可能安装唯一版本的GPU。当多名开发人员在统一服务器上使用不同的深度学习框架进行开发时，往往会产生环境冲突。最好的解决方案就是采用虚拟技术。 Docker 是世界领先的软件容器平台，也是目前最流行的 Linux 容器解决方案。Docker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker，就不用担心环境问题。而且 Docker 的接口相当简单，用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。和虚拟机相比，由于没有臃肿的从操作系统，Docker可以节省大量的磁盘空间以及其他系统资源。 虚拟机通常用于彻底隔离整个运行环境。例如，云服务提供商通常采用虚拟机技术隔离不同的用户。而Docker通常用于隔离不同的应用，例如前端，后端以及数据库。 2. 安装 Docker(a) 安装依赖包1$ yum install -y yum-utils device-mapper-persistent-data (b) 配置稳定仓库1$ yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo (c) 安装(默认为最新版)1$ yum install docker-ce (4) 修改docker运行时的根目录, 解决存储不足的问题123$ vim /lib/systemd/system/docker.service # 在 ExecStart=/usr/bin/dockerd 后添加 --graph=/home/docker$ ExecStart=/usr/bin/dockerd --graph=/home/docker (5) 重新启动docker服务123$ systemctl daemon-reload$ systemctl status docker$ systemctl start docker (7) 测试Docker是否正确安装12$ docker version$ docker run hello-world 3. 安装 nvidia-docker深度学习框架需要使用 GPU 加入计算，如果不安装 nvidia-docker 工具，那么在容器中将会无法调用宿主机上的 GPU 硬件设备。 (a) 移除旧版本 nvidia-GPU 和已经存在的 GPU 容器12$ docker volume ls -q -f driver=nvidia-docker | xargs -r -I&#123;&#125; -n1 docker ps -q -a -f volume=&#123;&#125; | xargs -r docker rm -f$ sudo yum remove nvidia-docker (b) 安装依赖包12$ distribution=$(. /etc/os-release;echo $ID$VERSION_ID)$ curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.repo | \ sudo tee /etc/yum.repos.d/nvidia-docker.repo (c) 安装nvidia-docker12$ sudo yum install -y nvidia-docker2$ sudo pkill -SIGHUP dockerd (d) 测试 nvidia-docker 是否安装成功1docker run --runtime=nvidia --rm nvidia/cuda:9.0-base nvidia-smi 4. CUDA9-CUDNN7-python3.6 源码安装 Caffe、Caffe2、Tensorflow、 Detectron 和 Darknet(a) 启动 GPU container 并登录12$ nvidia-docker run -tid --name TestMyGPU --net='host' nvidia/cuda:9.0-cudnn7-devel-centos7 /bin/bash # 启动容器$ docker exec -it TestMyGPU /bin/bash # 登录容器 (b) 配置变量1234$ export http_proxy=http://192.168.71.33:8080 # 设置网络$ export https_proxy=https://192.168.71.33:8080$ export PYINSTALL=/usr/local/python3 # 设置python3.6安装路径$ export PATH=$PYINSTALL/bin:$PATH (c) 安装 python3.6 和 Caffe，参照上一篇博客 Centos7 安装 Caffe。 (d) 在 /home 下安装 Caffe2、Tensorflow、 Detectron 和 Darknet 12345678910111213141516171819202122232425262728293031323334353637383940# 安装依赖包和 opencv$ yum install -y cmake3 &amp;&amp; pip3 install cython opencv-python==3.4.2.16# 安装 nccl，GPU分布式通信函数库$ cd /home &amp;&amp; git clone https://github.com/NVIDIA/nccl.git $ cd nccl &amp;&amp; make -j8 src.build CUDA_HOME='/usr/local/cuda-9.0/' NVCC_GENCODE="-gencode=arch=compute_70,code=sm_70" $ yum install -y rpm-build rpmdevtools &amp;&amp; make -j8 pkg.redhat.build &amp;&amp; make install $ echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib' &gt;&gt; /root/.bashrc $ cd /home &amp;&amp; rm -rf nccl &amp;&amp; source ~/.bashrc # 验证nccl是否安装成功# cd /home &amp;&amp; git clone https://github.com/NVIDIA/nccl-tests.git \# cd nccl-tests &amp;&amp; make -j8 &amp;&amp; ./build/all_reduce_perf -b 8 -e 256M -f 2 -g 1 \# cd /home &amp;&amp; rm -rf nccl-tests# 安装 darknet$ cd /home &amp;&amp; git clone https://github.com/pjreddie/darknet.git &amp;&amp; cd darknet \# 修改 Makefile 文件，令 GPU=1，CUDNN=1，OPENCV=1$ sed -i 's/GPU=0/GPU=1/' Makefile $ sed -i 's/CUDNN=0/CUDNN=1/' Makefile $ sed -i 's/OPENCV=0/OPENCV=1/' Makefile $ make -j32# 验证 darknet 是否安装成功# 执行 ./darknet 输出 usage: ./darknet &lt;function&gt;# 安装 Tensorflow 和 Keras$ cd /home &amp;&amp; pip3 install tensorflow-gpu==1.10 keras==2.2.0# 安装caffe2$ pip3 install pyyaml future hypothesis pydot $ cd /home &amp;&amp; git clone https://github.com/pytorch/pytorch.git $ cd pytorch &amp;&amp; git submodule update --init --recursive # 解决编译时 cmake 的版本问题：# 将文件 `pytorch/tools/build_pytorch_libs.sh` 复制到 `/home` 路径下# 修改./tools/build_pytorch_libs.sh 第31和32行 CMAKE_VERSION、CMAKE3_VERSION# CMAKE_VERSION=$(cmake --version | grep 'version' | awk '&#123;print $3&#125;' | awk -F. '&#123;print $1"."$2"."$3&#125;')# CMAKE3_VERSION=$(cmake3 --version | grep 'version' | awk '&#123;print $3&#125;' | awk -F. '&#123;print $1"."$2"."$3&#125;')$ rm -f /home/pytorch/tools/build_pytorch_libs.sh$ cp -f /home/build_pytorch_libs.sh /home/pytorch/tools/build_pytorch_libs.sh$ rm -f /home/build_pytorch_libs.sh $ python setup.py install $ cd /home &amp;&amp; rm -rf pytorch 验证 caffe2 是否安装成功， python 命令窗口执行123&gt;&gt;&gt; import torch&gt;&gt;&gt; import caffe2&gt;&gt;&gt; exit() 验证是否能使用 GPU123$ cd /home &amp;&amp; python -c 'from caffe2.python import core' 2&gt;/dev/null &amp;&amp; echo "Success" || echo "Failure"$ python -c 'from caffe2.python import workspace; print(workspace.NumCudaDevices())'$ python /usr/local/anaconda3/lib/python3.6/site-packages/caffe2/python/operator_test/rnn_cell_test.py 安装 COCO-API1234$ cd /home &amp;&amp; git clone https://github.com/pdollar/coco $ pip3 install setuptools==18.4 &amp;&amp; yum install -y tkinter$ cd coco/PythonAPI &amp;&amp; make -j8 &amp;&amp; make install &amp;&amp; python setup.py install $ cd /home &amp;&amp; rm -rf coco 验证 coco-api 是否安装成功, python命令窗口执行1&gt;&gt;&gt; from pycocotools.coco import COCO 安装detectron12345678910$ cd /home &amp;&amp; git clone https://github.com/facebookresearch/detectron $ cd detectron &amp;&amp; make -j8 # 验证 detectron 是否正确安装$ cd /home/detectron &amp;&amp; python detectron/tests/test_spatial_narrow_as_op.py$ python tools/infer_simple.py \ --cfg configs/12_2017_baselines/e2e_mask_rcnn_R-101-FPN_2x.yaml \ --output-dir tmp/detectron-visualizations \ --image-ext jpg \ --wts https://s3-us-west-2.amazonaws.com/detectron/35861858/12_2017_baselines/e2e_mask_rcnn_R-101-FPN_2x.yaml.02_32_51.SgT4y1cO/output/train/coco_2014_train:coco_2014_valminusminival/generalized_rcnn/model_final.pkl \ demo 5. 使用 Anaconda3 安装 Caffe、Pytorch 和 TensorflowAnaconda 是一个开源的Python发行版本，包含了conda、Python等180多个科学包及其依赖项，是当前最流行的 Python 数据科学开发平台。 因为包含了大量的科学包，Anaconda 的下载文件比较大（约 531 MB），如果只需要某些包，或者需要节省带宽或存储空间，也可以使用 Miniconda 发行版 ( 仅包含 conda 和 Python )。 Anaconda 当前集成了 caffe 和 pytorch，可以利用 Anaconda 快速安装 caffe 和 caffe2 ( 集成在 pytorch ) 中。由于 Docker 容器需要应用程序占用内存尽可能小，因此采用 Miniconda 代替 Anaconda。完成的 Dockerfile 文件如下，在宿主机中含有 Dockfile 文件的当前路径下运行 docker build -t deep_learning_environment:v0.1 . 即可生成满足深度学习环境对应要求的镜像。12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667FROM nvidia/cuda:9.0-cudnn7-runtime-centos7ENV LANG=en_US.UTF-8ARG http_proxy=http://192.168.71.33:8080ARG https_proxy=https://192.168.71.33:8080# 安装Miniconda3RUN cd /home \ # 安装依赖包 &amp;&amp; yum install -y epel-release-7-11.noarch wget git make bzip2 &amp;&amp; pip install cython \ # 安装nccl &amp;&amp; cd /home &amp;&amp; git clone https://github.com/NVIDIA/nccl.git \ &amp;&amp; cd nccl &amp;&amp; make -j8 src.build CUDA_HOME='/usr/local/cuda-9.0/' NVCC_GENCODE="-gencode=arch=compute_70,code=sm_70" \ &amp;&amp; yum install -y rpm-build rpmdevtools &amp;&amp; make -j8 pkg.redhat.build &amp;&amp; make install \ &amp;&amp; echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/nccl/build/lib' &gt;&gt; /root/.bashrc \ &amp;&amp; cd /home &amp;&amp; rm -rf nccl &amp;&amp; source ~/.bashrc \ # 验证nccl是否安装成功 # cd /home &amp;&amp; git clone https://github.com/NVIDIA/nccl-tests.git \ # cd nccl-tests &amp;&amp; make -j8 &amp;&amp; ./build/all_reduce_perf -b 8 -e 256M -f 2 -g 1 \ # cd /home &amp;&amp; rm -rf nccl-tests &amp;&amp; wget https://repo.anaconda.com/miniconda/Miniconda3-4.3.30-Linux-x86_64.sh \ &amp;&amp; bash Miniconda3-4.3.30-Linux-x86_64.sh -p /usr/local/miniconda3 -b \ # 将 miniconda 添加到系统路径 &amp;&amp; echo 'export PATH=/usr/local/miniconda3/bin:$PATH' &gt;&gt; /root/.bashrc \ &amp;&amp; echo 'export LD_LIBRARY_PATH=/usr/local/miniconda3/lib:$LD_LIBRARY_PATH' &gt;&gt; /root/.bashrc \ &amp;&amp; source ~/.bashrc &amp;&amp; rm -rf Miniconda3-4.3.30-Linux-x86_64.sh \ # 修改yum的链接问题 &amp;&amp; ln -s -f /usr/lib64/liblzma.so.5 /usr/local/miniconda3/lib/liblzma.so.5 \ # conda 安装 caffe-gpu &amp;&amp; conda install -y caffe-gpu protobuf \ # conda 安装 caffe2 # 直接安装下载速度非常慢，而且有可能失败 &amp;&amp; conda install -y pytorch-nightly -c pytorch \ &amp;&amp; pip install future hypothesis pydot \ # 验证 caffe 和 caffe2 是否安装成功 # $ python &amp;&amp; import torch &amp;&amp; import caffe &amp;&amp; import caffe2 # python -c 'from caffe2.python import core' 2&gt;/dev/null &amp;&amp; echo "Success" || echo "Failure" # python -c 'from caffe2.python import workspace; print(workspace.NumCudaDevices())' # python /usr/local/anaconda3/lib/python3.6/site-packages/caffe2/python/operator_test/rnn_cell_test.py # 安装 detectron &amp;&amp; cd /home &amp;&amp; git clone https://github.com/facebookresearch/detectron \ &amp;&amp; cd detectron &amp;&amp; pip install cython &amp;&amp; make -j8 \ # 验证 detectron 是否安装正确 # cd /home/detectron &amp;&amp; python detectron/tests/test_spatial_narrow_as_op.py # 安装darknet, 从 github 上下载darknet源码, 修改 Makefile 文件，令 GPU=1，CUDNN=1，OPENCV=1。 &amp;&amp; cd /home &amp;&amp; git clone https://github.com/pjreddie/darknet.git &amp;&amp; cd darknet \ &amp;&amp; sed -i 's/GPU=0/GPU=1/' Makefile \ &amp;&amp; sed -i 's/CUDNN=0/CUDNN=1/' Makefile \ &amp;&amp; sed -i 's/OPENCV=0/OPENCV=1/' Makefile \ &amp;&amp; make -j8 \ # 验证 darknet 是否安装成功 # 执行 ./darknet 输出 usage: ./darknet &lt;function&gt; # 安装tensorflow和keras &amp;&amp; cd /home &amp;&amp; pip install tensorflow-gpu==1.10 keras==2.2.0 -i https://pypi.douban.com/simple/ \ # 验证 tensorflow 和 keras 是否安装成功 # $ python &amp;&amp; import tensorflow &amp;&amp; import keras # 删除 minicond3/pkgs 里面的安装包, 降低内存占用 &amp;&amp; cd /usr/local/miniconda3/ &amp;&amp; rm -rf pkgs]]></content>
      <categories>
        <category>安装教程</category>
      </categories>
      <tags>
        <tag>centoe7 深度学习环境</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Centos7 安装 Caffe]]></title>
    <url>%2F2018%2F12%2F03%2Fcentos-caffe%2F</url>
    <content type="text"><![CDATA[1. Caffe 是什么Caffe 全称 Convolutional Architecture for Fast Feature Embedding，是一种常用的深度学习框架，主要应用在视频、图像处理方面的应用上。得益于RCNN框架的影响力，当前主流的目标检测模型 ( 例如 Faster-RCNN 和 SSD ) 的作者源码都是基于 Caffe 编写的。 2. Centos7 安装 Caffe虽然网上已经有很多相关的安装教程，但是大多数都是基于 Ubantu 系统的，而且网上的教程在安装过程中往往会报出各种莫名其妙的 bug。经过笔者多次血泪实践，发现大多数错误都是因为未能正确安装 boost 和 protouf 工具包。假设 Centos7 已经正确安装 Nvidia GPU 驱动程序和 CUDA9+CUDNN7的加速包，按照如下教程即可正确编译 Caffe 的 Python3.6 接口。如果电脑没有安装 GPU 驱动，请先参照 Nvidia 官网安装教程 正确安装 GPU。123456789101112131415161718192021222324252627282930313233343536373839# 安装依赖包$ yum clean all &amp;&amp; yum makecache &amp;&amp; yum install -y epel-release-7-11.noarch $ yum -y install zlib-devel openssl-devel bzip2-devel expat-devel$ yum -y install gdbm-devel readline-devel sqlite-devel$ yum -y install wget git make unzip libSM libXrender libXext# 安装 Python3.6$ cd /home &amp;&amp; wget https://www.python.org/ftp/python/3.6.6/Python-3.6.6.tgz$ tar -xvf Python-3.6.6.tgz &amp;&amp; cd Python-3.6.6$ ./configure --prefix=$PYINSTALL &amp;&amp; make -j32 &amp;&amp; make install$ ln -s $PYINSTALL/bin/python3 $PYINSTALL/bin/python$ cd /home &amp;&amp; rm -rf Python-3.6.6.tgz Python-3.6.6# 安装 scikit-image$ pip3 install numpy scikit-image -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com # 安装 caffe 依赖包$ yum -y install leveldb-devel snappy-devel opencv-devel hdf5-devel $ yum -y install gflags-devel glog-devel lmdb-devel openblas-devel python36-devel# 编译 boost 修复 libboost_python3.so 无法连接的错误$ cd /home &amp;&amp; wget https://dl.bintray.com/boostorg/release/1.67.0/source/boost_1_67_0.tar.gz $ tar -xvf boost_1_67_0.tar.gz $ cd boost_1_67_0 &amp;&amp; ./bootstrap.sh --with-toolset=gcc $ ./b2 cflags='-fPIC' cxxflags='-fPIC' include=/usr/include/python3.6m &amp;&amp; ./b2 install $ ln -s /usr/local/lib/libboost_python36.so /usr/lib64/libboost_python3.so $ echo /usr/local/lib &gt;&gt; /etc/ld.so.conf.d/caffe.conf &amp;&amp; ldconfig $ cd /home &amp;&amp; rm -rf boost_1_67_0.tar.gz boost_1_67_0 # 安装 protobuf$ echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib' &gt;&gt; /root/.bashrc $ source ~/.bashrc$ cd /home &amp;&amp; wget https://github.com/protocolbuffers/protobuf/releases/download/v3.5.1/protobuf-cpp-3.5.1.zip $ unzip protobuf-cpp-3.5.1.zip $ cd protobuf-3.5.1 &amp;&amp; ./configure &amp;&amp; make -j32 &amp;&amp; make install $ cd /home &amp;&amp; rm -rf protobuf-cpp-3.5.1.zip protobuf-3.5.1 $ wget https://github.com/protocolbuffers/protobuf/releases/download/v3.5.1/protobuf-python-3.5.1.zip $ unzip protobuf-python-3.5.1.zip $ cd protobuf-3.5.1/python &amp;&amp; python setup.py build &amp;&amp; python setup.py install $ cd /home &amp;&amp; rm -rf protobuf-python-3.5.1.zip protobuf-3.5.1 安装 caffe， 需要修改配置文件 Makefile.config12345678910111213# 安装 caffe$ cd /home &amp;&amp; git clone https://github.com/bvlc/caffe.git# 将 caffe/Makefile.config.example 文件复制到 /home 路径下，命名为 Makefile.config 并进行修改# 第05行改为 USE_CUDNN := 1# 第11行改为 USE_OPENCV := 1# 第39行改为 CUDA_ARCH := -gencode arch=compute_30,code=sm_30 \# 第51行改为 BLAS := open# 第55行改为 BLAS_INCLUDE := /usr/include/openblas# 第56行改为 BLAS_LIB := /usr/lib64$ cp Makefile.config caffe/Makefile.config &amp;&amp; rm -f Makefile.config$ cd caffe &amp;&amp; make -j32 &amp;&amp; make pycaffe -j32$ cp -r python/caffe /usr/local/python3/lib/python3.6/site-packages$ cp .build_release/lib/* /usr/lib64 在 python 命令窗口中执行 import caffe 查看 caffe 的 python 接口是否编译成功。12# 验证 caffe 是否安装成功&gt;&gt;&gt; import caffe]]></content>
      <categories>
        <category>安装教程</category>
      </categories>
      <tags>
        <tag>centos caffe python3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World——利用hexo和github快速搭建个人博客]]></title>
    <url>%2F2018%2F12%2F01%2Fhello-world%2F</url>
    <content type="text"><![CDATA[一、hexo和github简介 Hexo 生成静态网页，Github 托管网页，Markdown 编辑博客。 1. hexo是什么？Hexo 是一款基于 Node.js 语言、快速、简洁且高效的博客框架。通过使用Markdown（或其他渲染引擎）解析文章，即使是前端小白也可利用 hexo 框架的靓丽主题快速生成相当专业的静态网页。 2. github是什么？GitHub 是一个面向开源及私有软件项目的托管平台，除了git 代码仓库托管及基本的 Web 管理界面以外，还提供了订阅、讨论组、文本渲染、在线文件编辑器、协作图谱（报表）、代码片段分享（Gist）等功能，是当前最活跃的“程序猿交友平台”。 3. markdown是什么？Markdown 是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。Markdown的语法简洁易学，功能比纯文本更强大，世界上最流行的博客平台 WordPress 能很好的支持Markdown。 二、搭建博客环境1. 安装 Node.jsHexo 博客框架基于 Node.js 语言，首先下载 Node.js安装包，选择对应的版本进行安装。默认安装过程会配置环境变量及 npm 包，安装完成后在命令窗口（例如 windows 系统的 cmd 窗口）输入 node -v 即可验证是否安装成功。 2. 安装 GitGit 是开源的分布式版本控制系统，可以将本地编辑完成的博客同步到 Github 服务器上。首先下载 Git安装包，安装完成后在命令窗口输入 git -v 即可验证是否安装成功。 3. 安装 HexoHexo是个人博客网站的框架，安装步骤参考 官网文档。首先在本地建立名为blog的文件夹（文件夹名任意），然后在blog文件夹当前路径下开启命令窗口，通过 npm 命令即可完成安装。1$ npm install -g hexo-cli 安装完成后，在命令窗口中初始化博客。1$ hexo init blog 初始化完成后，分别下述命令检测博客环境是否正常。12$ hexo generate # 生成博客$ hexo server # 启动本地服务器 hexo 3.0把服务器独立成个别模块，需要单独安装npm i hexo-server。如果没有报错，接下来就是见证奇迹的时刻了。在浏览器中输入网址 http://localhost:4000，就可以看到诞生的第一篇博客。 4. 上传到 Github首先到 官网注册，假定注册的用户名为 user_name，注册的邮箱为 user_email，然后创建一个仓库，设置该仓库的主页面，得到你的github主页面网址 http://user_name.github.io。其他用户在浏览器中输入该网址，就能看到你的主页面。最后编辑站点配置文件 /blog/_config.yml，在该文件的末尾加入：1234deploy: type: git repository: https://github.com/user_name/user_name.github.io branch: master 在命令窗口运行代码 npm install hexo-deployer-git --save 安装 git 命令部署插件后，执行如下代码：123456$ git config --global user.name "user_name" # 指定 git 上传的仓库$ git config --global user.email user_email$ hexo clean # 清理缓存$ hexo generate # 生成博客$ hexo deploy # 同步到 github 主页面 5. 绑定个人域名待续 6. 图床加速待续 7. Markdown 编辑工具当前有许多好用的 Markdown 编辑工具，有的收费，有的免费，相对而言收费工具的体验较好。Markdown 文件的后缀名为.md，对于一名程序员来说，最友好的Markdown 编辑界面当然是 IDE 自带的 Markdown 编辑插件。在 Pycharm 中添加 Markdown 插件的步骤如下，File-&gt;Settings-&gt;Plugins-&gt;Install JetBrains Plugins-&gt;输入Markdown-&gt;选择插件-&gt;Install-&gt;安装完成后重启PyCharm。编辑界面如下图所示，黑色背景，支持预览，所见即所得。 Pycharm Markdown 插件编辑效果图 在 VSCodescode 中支持 Markdown 语法，只需要下载 Markdown 预览插件即可。在 VSCode 中添加插件的步骤如下，选择左边栏第四个图标 Extensions，在输入框搜索 Markdown Preview Enhanced，安装成功后重启 VSCode。编辑界面如下图所示，黑色背景，支持预览，所见即所得。 VSCode Markdown 插件编辑效果图]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo 博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[为什么写博客]]></title>
    <url>%2F2018%2F11%2F28%2Fwhy-blog%2F</url>
    <content type="text"><![CDATA[刘未鹏 —— 《暗时间》写一个博客有很多的好处，却没有任何明显的坏处。更明确的说：用博客的形式来记录下你有价值的思考，会带来很多好处，却没有任何明显的坏处。写一个长期的价值博客最大的几点好处: 能够交到很多志同道合的朋友。 书写是为了更好地思考。 “教”是最好的“学”。如果一件事情你不能讲清楚，十有八九你还没有完全理解。 激励你去持续学习和思考。 学会持之以恒地做一件事情。 一个长期的价值博客是一份很好的简历。 谨以博客记录算法菜鸟的“攻城狮”之路。]]></content>
  </entry>
</search>
